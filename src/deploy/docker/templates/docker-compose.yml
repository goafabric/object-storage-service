version: "3.7"

services:
  object-storage-service:
    container_name: ${_Values_root_name}-application
    image:  ${_Values_image_repository}${_Values_image_native}:${_Values_image_tag}
    restart: 'no'
    ports:
      - "${_Values_service_port}:${_Values_service_port}"
    command: ["-Xmx${_Values_resources_requests_memory}"]

    healthcheck:
      test: "curl -f http://localhost:${_Values_service_port}/actuator/health || exit 1"
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - tmp:/tmp
      - applogs:/usr/share/logs
    networks:
      - ${_Values_root_name}-net
    environment:
      #application
      TZ: Europe/Berlin
      server.port: "${_Values_service_port}"
      server.tomcat.threads.max: "20"
      server.forward-headers-strategy: FRAMEWORK

      #security
      security.authentication.enabled: "false"

      #monitoring
      management.endpoint.health.show-details: always
      management.endpoints.web.exposure.include: "health,heapdump,circuitbreakers,prometheus"

      #profile
      spring.profiles.active: "s3-object-storage"

      #jdbc
      spring.datasource.url: "jdbc:postgresql://postgres:5432/objectstorage"

      #s3
      cloud.aws.s3.bucket.name: "objects"
      cloud.aws.s3.endpoint: "http://s3minio:9000"
      cloud.aws.s3.path-style.enabled: "true"

      #secrets
      spring.datasource.username: "object-storage-service"
      spring.datasource.password: "object-storage-service"

      cloud.aws.credentials.access-key: "minioadmin"
      cloud.aws.credentials.secret-key: "minioadmin"

      #log levels
      logging.level.root: "WARN"
      logging.level.org.goafabric: "INFO"
      logging.level.org.springframework: "INFO"

  s3minio:
    container_name: ${_Values_root_name}-s3minio
    command: server /data --console-address ':9001'
    image: quay.io/minio/minio:RELEASE.2023-01-25T00-19-54Z
    restart: 'no'
    ports:
      - 9100:9000
      - 9101:9001
    volumes:
      - miniodata:/data
    networks:
      - ${_Values_root_name}-net
    environment:
      TZ: "Europe/Berlin"

  postgres:
    container_name: ${_Values_root_name}-postgres
    image: postgres:15.1
    restart: 'no'
    ports:
      - 5432:5432
    command: postgres -c 'shared_buffers=128MB' -c 'max_connections=30' -c 'shared_preload_libraries=pg_stat_statements'
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - ${_Values_root_name}-net
    environment:
      TZ: "Europe/Berlin"
      POSTGRES_DB: "objectstorage"

      #secrets
      POSTGRES_USER: "object-storage-service"
      POSTGRES_PASSWORD: "object-storage-service"

volumes:
    tmp:
    applogs:

    pgdata:
      driver: local
    miniodata:
      driver: local

networks:
  object-storage-service-net:
    driver: bridge